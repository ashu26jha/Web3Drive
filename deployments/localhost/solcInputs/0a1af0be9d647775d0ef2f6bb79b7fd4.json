{
  "language": "Solidity",
  "sources": {
    "contracts/Web3Drive.sol": {
      "content": "pragma solidity ^0.8.7;\n// SPDX-License-Identifier: MIT\n\n//Errors\n\nerror fileNameAlreadyExist (address acc, string name);\nerror fileDoesNotExist (address acc, string name);\n\ncontract Web3Drive{\n\n    // Storage variables : Mappings\n    \n    mapping (address => mapping (string => string)) private s_ownfiles;\n    mapping (address => mapping (address => string)) private s_nicknames;\n    mapping (string => address [] ) private s_hasAccess;\n    \n    // Immutable variables\n\n    address immutable private ownerOfContract;\n    address immutable private deadAddress = 0x000000000000000000000000000000000000dEaD;\n\n    // Events\n\n    event fileAdded (\n        address indexed owner,\n        string  name,\n        string indexed hash\n    );\n\n    event accessGiven (\n        address indexed owner,\n        string name,\n        string indexed hash\n    );\n\n\n    constructor (){\n        ownerOfContract = msg.sender;\n    }\n\n    function addFile(string memory name, string calldata ipfshash) public {\n        \n        // if(bytes(s_ownfiles[msg.sender][name]).length > 1){\n        //     revert fileNameAlreadyExist(msg.sender,name);\n        // }\n\n        s_ownfiles[msg.sender][name] = ipfshash;\n        s_hasAccess[name].push(msg.sender);\n        emit fileAdded (msg.sender,name,ipfshash);\n\n    }\n\n    function allowAccess(address account, string memory name, string calldata ipfshash) public {\n        \n        if(bytes(s_ownfiles[msg.sender][name]).length < 1){\n            revert fileDoesNotExist(msg.sender,name);\n        }\n        \n        s_hasAccess[name].push(account);\n        s_ownfiles[account][name] = ipfshash;\n        s_ownfiles[msg.sender][name] = ipfshash;\n\n        emit accessGiven(msg.sender, name, ipfshash);\n    }\n\n    function addNickNames (address account, string memory nickname) public {\n        s_nicknames[msg.sender][account] = nickname;\n    }\n\n    function showAccess (string memory name) public view returns (address [] memory) {\n        return s_hasAccess[name];\n    }\n\n    function revokeAccess(address account, string memory ipfshash, string memory name) public {\n        \n        if(bytes(s_ownfiles[msg.sender][name]).length < 1){\n            revert fileDoesNotExist(msg.sender,name);\n        }\n\n        for(uint256 i = 0 ; i < s_hasAccess[name].length; i++){\n            if(s_hasAccess[name][i]==account){\n                s_hasAccess[name][i] = deadAddress;\n                s_ownfiles[account][name]=\"\";\n                break;\n            }\n        }\n        \n        s_ownfiles[msg.sender][name] = ipfshash;\n    }\n\n    function deleteFile(string memory name) public {\n        if(bytes(s_ownfiles[msg.sender][name]).length < 1){\n            revert fileDoesNotExist(msg.sender,name);\n        }\n\n        delete s_ownfiles[msg.sender][name];\n        delete s_hasAccess[name];\n    }\n\n    function getIPFShash(string memory name) public view returns (string memory){\n        // Check wheter file exist or not\n        return s_ownfiles[msg.sender][name];\n    }\n\n    function getOwner() public view returns(address) {\n        return ownerOfContract;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}