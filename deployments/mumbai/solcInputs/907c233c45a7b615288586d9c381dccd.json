{
  "language": "Solidity",
  "sources": {
    "contracts/Web3Drive.sol": {
      "content": "pragma solidity ^0.8.7;\n// SPDX-License-Identifier: MIT\n\n// Errors\n\nerror doesNotHavePrivilege () ;\n\ncontract Web3Drive{\n\n    // Events \n    event fileAdded (\n        address indexed Owner,\n        uint256  tokenId,\n        string ipfsHash\n    );\n\n    event accessLevel (\n        address indexed gotAccess,\n        uint256  token,\n        uint8 AdminPrivilege\n    );\n\n    event fileDeleted(\n        address indexed whoDeleted,\n        uint256 token\n    );\n\n    struct Hello{\n        mapping(uint256 => uint8) Access;\n        // Mapping from tokenID to access level\n    }\n    // Immutable variables\n    address immutable private ownerOfContract;\n\n    // Storage Variables\n    uint256 public tokenID;\n\n    // Mapping from address to this struct\n    mapping(uint256 => string)  tokenToIPFS;\n    mapping(address => Hello)  accessList;\n\n    // Modifier\n    modifier requiredAccess3(uint256 tokenId) {\n        if(getAccessList(tokenId)<3){\n            revert doesNotHavePrivilege();\n        }\n        _;\n    }\n\n    modifier requiredAccess2(uint256 tokenId) {\n        if(getAccessList(tokenId)<2){\n            revert doesNotHavePrivilege();\n        }\n        _;\n    }\n\n    constructor (){\n        ownerOfContract = msg.sender;\n    }\n\n    function addFile (string memory ipfsHash) public {\n        tokenToIPFS[tokenID] = ipfsHash;\n        ((accessList[msg.sender]).Access[tokenID]) = 3;\n        tokenID = tokenID+1;\n\n        emit fileAdded(msg.sender,tokenID-1,ipfsHash);\n    }\n\n    function updateIPFS (uint256 tokenId, string memory ipfsHash)  requiredAccess2(tokenId) public {\n        tokenToIPFS[tokenId] = ipfsHash;\n        emit fileDeleted(msg.sender,tokenId);\n    }\n\n    function deleteFile (uint256 tokenId) requiredAccess3(tokenId) public {\n        tokenToIPFS[tokenId] = \"Deleted\";\n    }\n\n    function changeAccessLevel (address account,uint256 tokenId,uint8 level) requiredAccess3(tokenId) public {\n        ((accessList[account]).Access[tokenId]) = level;\n        emit accessLevel(account,tokenId,level);\n    }\n\n    function getOwner () public view returns(address) {\n        return ownerOfContract;\n    }\n\n    function tokenIDtoIPFS (uint256 tokenId) public view returns(string memory){\n        return tokenToIPFS[tokenId];\n    }\n\n    function getAccessList (uint256 tokenId) public view returns(uint8){\n        return (accessList[msg.sender]).Access[tokenId];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}